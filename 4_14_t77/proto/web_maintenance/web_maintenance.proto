syntax = "proto2";

package web_maintenance;

import "factory_reset/factory_reset.proto";
import "general_types/general_types.proto";
import "types/types.proto";

message Maintenance {
  optional DateAndTime date_and_time = 1;
  optional Temperature temperature = 2;
  optional Afci afci = 3;
  optional FwUpgrade fw_upgrade = 4;
  optional Backup backup = 5;
  optional Diagnostics diagnostics = 6;
  optional Standby standby = 7;
  optional GridProtection grid_protection = 8;
  optional BoardReplacement board_replacement = 9;
  optional types.Bool factory_reset = 10;
  optional types.Bool reset_counters = 11;
  optional GridProtectionLogin grid_protection_login = 12;
  optional general_types.Header header = 13;
  optional CircuitBreakers circuit_breakers = 14;
  optional Bui bui = 15;
  optional TripLock trip_lock = 16;
  optional Pid pid = 17;
  optional factory_reset.FactoryReset factory_reset_status = 18;
  optional Spd spd = 19;

  message DateAndTime {
    optional general_types.DateTime date = 1;
    optional types.String ntp = 2;
    optional types.Int32 gmt_offset = 3;
  }

  message Temperature {
    optional types.Uint32 value = 1;
    optional Units units = 2;

    message Units {
      optional types.Bool celsius = 1;
      optional types.Bool fahrenheit = 2;
    }
  }

  message Afci {
    optional types.Bool enable = 1;
    optional types.Bool manual_reconnect = 2;
    optional Test test = 3;
    optional types.Bool dsp_error = 4;

    enum AfciTestResult {
      AFCI_TEST_ERROR = -1;
      AFCI_TEST_FAIL = 0;
      AFCI_TEST_PASS = 1;
    }

    message Test {
      optional AfciTestResult result = 1;
      optional types.Uint32 timeout = 2;
    }
  }

  message FwUpgrade {
  }

  message Backup {
  }

  message Diagnostics {
    optional Inverters inverters = 1;
    optional BatterySelfTest battery_self_test = 2;

    message Inverters {
      optional Unit left = 1;
      optional Unit primary = 2;
      optional Unit right = 3;
      repeated Unit units = 4;

      message Unit {
        optional types.String inv_sn = 1;
        repeated Optimizer optimizer = 2;
        optional Isolation isolation = 3;
        optional OptimizersStatus optimizers_status = 4;
        optional SelfTest self_test = 5;
        repeated QuadOptimizer quad_optimizer = 6;
        optional general_types.Position position = 7;

        message OptimizersStatus {
          optional types.Uint32 enabled = 1;
          optional types.Uint32 connected = 2;
        }

        message Optimizer {
          optional types.String sn = 1;
          optional types.Bool reports = 2;
          optional general_types.DateTime date = 3;
          optional types.FloatS energy = 4;
          optional types.Uint32 output_v = 5;
          optional types.Uint32 input_v = 6;
          optional types.Uint32 input_c = 7;
          optional Temperature temperature = 8;
        }

        message QuadOptimizer {
          optional types.String sn = 1;
          optional types.Bool reports = 2;
          optional Optimizer optimizer1 = 3;
          optional Optimizer optimizer2 = 4;
          optional Optimizer optimizer3 = 5;
          optional Optimizer optimizer4 = 6;
        }

        message Isolation {
          optional types.FloatS alpha = 1;
          optional types.FloatS r_iso = 2;
          optional types.Uint32 fault_location = 3;
        }

        message SelfTest {
          optional TestCondition test_condition = 1;
          repeated Test tests = 2;

          enum TestCondition {
            TEST_COND_OK = 0;
            TEST_COND_NOT_READY_GRM = 1;
            TEST_COND_NOT_READY_PROD = 2;
            TEST_COND_NOT_READY_INV_OFF = 3;
          }

          message Test {
            optional types.Uint32 idx = 1;
            optional types.String name = 2;
            optional SettingsValues settings = 3;
            optional ResultsValues result = 4;
            optional TestStatus status = 5;

            enum TestStatus {
              TEST_STATUS_NOT_TESTED = 0;
              TEST_STATUS_PASSED = 1;
              TEST_STATUS_FAILED = 2;
             }

            message SettingsValues {
              optional types.FloatS vgmax = 1;
              optional types.FloatS vgmin = 2;
              optional types.FloatS fgmax = 3;
              optional types.FloatS fgmin = 4;
              optional types.Uint32 holdtime = 5;
            }

            message ResultsValues {
              optional types.FloatS trip_value = 1;
              optional types.Uint32 trip_time = 2;
            }
          }
        }
      }
    }

    message BatterySelfTest {
      optional PreCondition pre_condition = 1;
      optional BatteryPackTest current_test = 2;
      repeated BatteryPackTest test_results = 3;
      optional types.Bool start_test = 4;
      optional types.Bool stop_test = 5;

      enum BatteryTestStatus {
        NOT_TESTED = 0;
        IN_PROGRESS = 1;
        PASSED = 2;
        FAILED = 3;
      }

      enum PreCondition {
        TEST_PRE_COND_OK = 0;
        TEST_PRE_COND_NOT_READY_INV_OFF = 1;
        TEST_PRE_COND_NOT_READY_INV_COMM_ERROR = 2;
        TEST_PRE_COND_NOT_READY_INV_BATT_ERROR = 3;
        TEST_PRE_COND_NOT_READY_MIN_SOE = 4;
        TEST_PRE_COND_SYSTEM_IS_NOT_READY = 5;
      }

      message BatteryPackTest {
        optional BatteryTestStatus package_test_status = 1;
        optional general_types.DateTime date = 2;
        repeated BatteryTest battery_test = 3;

        message BatteryTest {
          optional types.Uint32 idx = 1;
          optional types.String battery_sn = 2;
          optional types.Int32 battery_power = 3;
          optional BatteryTestStatus communication = 4;
          optional BatteryTestStatus charge = 5;
          optional BatteryTestStatus discharge = 6;
        }
      }
    }
  }

  message GridProtection {
    repeated Trip vg_max = 1;
    repeated Trip vg_min = 2;
    repeated Trip fg_max = 3;
    repeated Trip fg_min = 4;
    optional types.Uint32 grm_time = 5;
    repeated Trip v_line_max = 6;
    repeated Trip v_line_min = 7;

    message Trip {
      optional types.FloatS value = 1;
      optional types.Uint32 holdtime = 2;
    }
  }

  message Standby {
    optional types.Bool activated = 1;
  }

  message BoardReplacement {
  }

  message GridProtectionLogin {
    optional types.String password = 1;
  }

  message CircuitBreakers {
    optional types.FloatS inv_rating = 1;
  }

  message Bui {
    optional types.Bool hw_reboot = 1;
  }

  message TripLock {
    optional types.Bool enabled = 1;
  }

  message Pid {
    optional Mitigation mitigation = 1;

    message Mitigation {
      optional types.Bool disabled = 1;
      optional types.Bool rectifier = 2;
      optional types.Bool guard = 3;
    }
  }

  message Spd {
    optional types.Bool ac_spd_enabled = 1;
    optional types.Bool dc_spd_enabled = 2;
  }
}
