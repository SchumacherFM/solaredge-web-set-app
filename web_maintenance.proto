syntax = "proto2";

import "factory_reset.proto";
import "general_types.proto";
import "types.proto";

package web_maintenance;

message Maintenance {
    optional DateAndTime dateAndTime = 1;
    optional Temperature temperature = 2;
    optional Afci afci = 3;
    optional FwUpgrade fwUpgrade = 4;
    optional Backup backup = 5;
    optional Diagnostics diagnostics = 6;
    optional Standby standby = 7;
    optional GridProtection gridProtection = 8;
    optional BoardReplacement boardReplacement = 9;
    optional types.Bool factoryReset = 10;
    optional types.Bool resetCounters = 11;
    optional GridProtectionLogin gridProtectionLogin = 12;
    optional general_types.Header header = 13;
    optional CircuitBreakers circuitBreakers = 14;
    optional Bui bui = 15;
    optional TripLock tripLock = 16;
    optional Pid pid = 17;
    optional factory_reset.FactoryReset factoryResetStatus = 18;

    message DateAndTime {
        optional general_types.DateTime date = 1;
        optional types.String ntp = 2;
        optional types.Int32 gmtOffset = 3;
    }

    message Temperature {
        optional types.Uint32 value = 1;
        optional Units units = 2;

        message Units {
            optional types.Bool celsius = 1;
            optional types.Bool fahrenheit = 2;
        }
    }

    message Afci {
        optional types.Bool enable = 1;
        optional types.Bool manualReconnect = 2;
        optional Test test = 3;
        optional types.Bool dspError = 4;

        enum AfciTestResult {
            AFCI_TEST_ERROR = -1;
            AFCI_TEST_FAIL = 0;
            AFCI_TEST_PASS = 1;
        }

        message Test {
            optional AfciTestResult result = 1;
            optional types.Uint32 timeout = 2;
        }
    }

    message FwUpgrade {
    }

    message Backup {
    }

    message Diagnostics {
        optional Inverters inverters = 1;
        optional BatterySelfTest batterySelfTest = 2;

        message Inverters {
            optional Unit left = 1;
            optional Unit primary = 2;
            optional Unit right = 3;
            repeated Unit unitsList = 4;

            message Unit {
                optional types.String invSn = 1;
                repeated Optimizer optimizerList = 2;
                optional Isolation isolation = 3;
                optional OptimizersStatus optimizersStatus = 4;
                optional SelfTest selfTest = 5;
                repeated QuadOptimizer quadOptimizerList = 6;
                optional general_types.Position position = 7;

                message OptimizersStatus {
                    optional types.Uint32 enabled = 1;
                    optional types.Uint32 connected = 2;
                }

                message Optimizer {
                    optional types.String sn = 1;
                    optional types.Bool reports = 2;
                    optional general_types.DateTime date = 3;
                    optional types.FloatS energy = 4;
                    optional types.Uint32 outputV = 5;
                    optional types.Uint32 inputV = 6;
                    optional types.Uint32 inputC = 7;
                    optional Temperature temperature = 8;
                }

                message QuadOptimizer {
                    optional types.String sn = 1;
                    optional types.Bool reports = 2;
                    optional Optimizer optimizer1 = 3;
                    optional Optimizer optimizer2 = 4;
                    optional Optimizer optimizer3 = 5;
                    optional Optimizer optimizer4 = 6;
                }

                message Isolation {
                    optional types.FloatS alpha = 1;
                    optional types.FloatS rIso = 2;
                    optional types.Uint32 faultLocation = 3;
                }

                message SelfTest {
                    optional TestCondition testCondition = 1;
                    repeated Test testsList = 2;

                    enum TestCondition {
                        TEST_COND_OK = 0;
                        TEST_COND_NOT_READY_GRM = 1;
                        TEST_COND_NOT_READY_PROD = 2;
                        TEST_COND_NOT_READY_INV_OFF = 3;
                    }

                    message Test {
                        optional types.Uint32 idx = 1;
                        optional types.String name = 2;
                        optional SettingsValues settings = 3;
                        optional ResultsValues result = 4;
                        optional TestStatus status = 5;

                        enum TestStatus {
                            TEST_STATUS_NOT_TESTED = 0;
                            TEST_STATUS_PASSED = 1;
                            TEST_STATUS_FAILED = 2;
                         }

                        message SettingsValues {
                            optional types.FloatS vgmax = 1;
                            optional types.FloatS vgmin = 2;
                            optional types.FloatS fgmax = 3;
                            optional types.FloatS fgmin = 4;
                            optional types.Uint32 holdTime = 5;
                        }

                        message ResultsValues {
                            optional types.FloatS tripValue = 1;
                            optional types.Uint32 tripTime = 2;
                        }
                    }
                }
            }
        }

        message BatterySelfTest {
            optional PreCondition preCondition = 1;
            optional BatteryPackTest currentTest = 2;
            optional BatteryPackTest testResultsList = 3;
            optional types.Bool startTest = 4;
            optional types.Bool stopTest = 5;

            enum BatteryTestStatus {
                NOT_TESTED = 0;
                IN_PROGRESS = 1;
                PASSED = 2;
                FAILED = 3;
            }

            enum PreCondition {
                TEST_PRE_COND_OK = 0;
                TEST_PRE_COND_NOT_READY_INV_OFF = 1;
                TEST_PRE_COND_NOT_READY_INV_COMM_ERROR = 2;
                TEST_PRE_COND_NOT_READY_INV_BATT_ERROR = 3;
                TEST_PRE_COND_NOT_READY_MIN_SOE = 4;
                TEST_PRE_COND_SYSTEM_IS_NOT_READY = 5;
            }

            message BatteryPackTest {
                optional BatteryTestStatus packageTestStatus = 1;
                optional general_types.DateTime date = 2;
                repeated BatteryTest batteryTestList = 3;

                message BatteryTest {
                    optional types.Uint32 idx = 1;
                    optional types.String batterySn = 2;
                    optional types.Int32 batteryPower = 3;
                    optional BatteryTestStatus communication = 4;
                    optional BatteryTestStatus charge = 5;
                    optional BatteryTestStatus discharge = 6;
                }
            }
        }
    }

    message GridProtection {
        repeated Trip vgMaxList = 1;
        repeated Trip vgMinList = 2;
        repeated Trip fgMaxList = 3;
        repeated Trip fgMinList = 4;
        optional types.Uint32 grmTime = 5;
        repeated Trip vLineMaxList = 6;
        repeated Trip vLineMinList = 7;

        message Trip {
            optional types.FloatS value = 1;
            optional types.Uint32 holdtime = 2;
        }
    }

    message Standby {
        optional types.Bool activated = 1;
    }

    message BoardReplacement {
    }

    message GridProtectionLogin {
        optional types.String password = 1;
    }

    message CircuitBreakers {
        optional types.FloatS invRating = 1;
    }

    message Bui {
        optional types.Bool hwReboot = 1;
    }

    message TripLock {
        optional types.Bool enabled = 1;
    }

    message Pid {
        optional Mitigation mitigation = 1;

        message Mitigation {
            optional types.Bool disabled = 1;
            optional types.Bool rectifier = 2;
            optional types.Bool guard = 3;
        }
    }
}
