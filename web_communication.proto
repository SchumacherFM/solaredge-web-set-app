syntax = "proto2";

import "device_coupling.proto";
import "general_types.proto";
import "hg2.proto";
import "sok_status.proto";
import "types.proto";
import "zigbee.proto";

package web_communication;

message Communication {
    optional ServerChannel serverChannel = 1;
    optional Lan lan = 2;
    optional Rs485 rs4851 = 3;
    optional Rs485 rs4852 = 4;
    optional Zigbee zigbee = 5;
    optional Wifi wifi = 6;
    optional Cellular cellular = 7;
    optional Gpio gpio = 8;
    optional ModbusTcpPort modbusTcpPort = 9;
    optional Battery48V battery48v = 10;
    optional types.Bool sOk = 11;
    optional ServerChannelMethod serverChannelMethod = 12;
    optional sok_status.SokStatus sokStatus = 13;
    optional device_coupling.DeviceCoupling couplingWithEvs = 14;
    optional device_coupling.DeviceCoupling couplingWithInverter = 15;

    enum ServerChannelMethod {
        MANUAL_SELECT = 0;
        AUTO_SELECT = 1;
    }

    message ServerChannel {
        optional types.Bool lan = 1;
        optional types.Bool cellular = 2;
        optional types.Bool wifi = 3;
        optional types.Bool rs4851SeSlave = 4;
        optional types.Bool zigbeeSlave = 5;
        optional types.Bool rs4852SeSlave = 6;
    }

    message Lan {
        optional types.Bool dhcp = 1;
        optional Ip ip = 2;
        optional types.String mac = 3;
        optional types.Bool cableConnected = 4;

        message Ip {
            optional types.String ipAddress = 1;
            optional types.String subnetMask = 2;
            optional types.String gateway = 3;
            optional types.String dns = 4;
        }
    }

    message Rs485 {
        optional Protocol protocol = 1;
        optional SlaveDetect slaveDetect = 2;
        repeated Slave slavesList = 3;
        repeated ModbusDevice modbusDevicesList = 4;
        optional ModbusDeviceOptions modbusOptions = 5;
        optional ModbusDeviceRemove modbusRemove = 6;
        optional types.Uint32 deviceId = 7;
        optional Baudrate baudrate = 8;

        message Protocol {
            optional types.Bool seSlave = 1;
            optional types.Bool seMaster = 2;
            optional types.Bool modbusMultiDevices = 3;
            optional types.Bool sunspec = 4;
            optional types.Bool none = 5;
        }

        message SlaveDetect {
            optional types.Uint32 duration = 1;
            optional types.Uint32 numOfSlaves = 2;
            optional types.Uint32 numOfLoops = 3;
            optional types.Uint32 maxNumOfLoops = 4;
            optional types.Bool stop = 5;
        }

        message Slave {
            optional types.String id = 1;
            optional general_types.Date date = 2;
        }

        message ModbusDevice {
//            enum DevicesCase {
//                DEVICES_NOT_SET = 0;
//                METER = 1;
//                BATTERY = 2;
//                EV_CHARGER = 3;
//            }

            oneof devices {
                Meter meter = 1;
                Battery battery = 2;
                EvCharger evCharger = 3;
            }

            message SetDeviceID {
                optional types.Uint32 currentDeviceId = 1;
                optional types.Uint32 newDeviceId = 2;
            }

            message Meter {
                optional Function pb_function = 1;
                optional Protocol protocol = 2;
                optional types.Uint32 deviceId = 3;
                optional types.Uint32 ctRating = 4;
                optional GridTopology gridTopology = 5;
                optional types.Uint32 ptScaling = 6;
                optional types.Uint32 deviceIndex = 7;
                optional Commissioning commissioning = 8;
                optional types.Uint32 ctRatingSecondary = 9;
                optional types.Uint32 ctRatingSecondaryOptionsList = 10;
                optional types.Uint32 vtRating = 11;
                optional types.Uint32 vtRatingSecondary = 12;
                optional CtPhaseLoss ctPhaseLoss = 13;
                optional types.Uint32 productionCtRating = 14;
                optional types.Uint32 exportImportCtRating = 15;
                optional types.Uint32 cableGauge = 16;
                optional types.Uint32 conduitLength = 17;

                message Function {
                    optional types.Bool inverterProduction = 1;
                    optional types.Bool exportImport = 2;
                    optional types.Bool consumption = 3;
                    optional types.Bool siteProduction = 4;
                    optional types.Bool externalProduction = 5;
                    optional types.Bool mExport = 6;
                    optional types.Bool mImport = 7;
                    optional types.Bool productionAndExportImport = 8;
                }

                message Protocol {
                    optional types.Bool solaredge = 1;
                    optional types.Bool wattnode = 2;
                    optional types.Bool pro1Pro380 = 3;
                    optional types.Bool janitza = 4;
                }

                message GridTopology {
                    optional types.Bool wye = 1;
                    optional types.Bool delta = 2;
                }

                message Commissioning {
                    optional SetDeviceID serialConf = 1;
                    optional SetDeviceID setId = 2;
                }

                message CtPhaseLoss {
                    optional types.Bool ct1 = 1;
                    optional types.Bool ct2 = 2;
                    optional types.Bool ct3 = 3;
                    optional types.Bool l1 = 4;
                    optional types.Bool l2 = 5;
                    optional types.Bool l3 = 6;
                }
            }

            message Battery {
                optional Protocol protocol = 1;
                optional BatteryInfo batteryInformation = 2;
                optional types.Uint32 deviceId = 3;
                optional types.Uint32 deviceIndex = 4;

                message Protocol {
                    optional types.Bool lg = 1;
                    optional types.Bool t74 = 2;
                }

                message BatteryInfo {
                    optional types.String serialNumber = 1;
                    optional types.String model = 2;
                    optional types.FloatS nameplate = 3;
                    optional types.String fwVersion = 4;
                }
            }
            message EvCharger {
            }
        }

        message ModbusDeviceOptions {
                optional types.Bool meter = 1;
                optional types.Bool battery = 2;
                optional types.Bool evCharger = 3;
        }

        message ModbusDeviceRemove {
            optional ModbusDeviceOptions deviceType = 1;
            optional types.Uint32 deviceIndex = 2;
        }

        message Baudrate {
            optional types.Bool rate9600 = 1;
            optional types.Bool rate19200 = 2;
            optional types.Bool rate38400 = 3;
            optional types.Bool rate57600 = 4;
            optional types.Bool rate115200 = 5;
        }
    }

    message Wifi {
        optional Network discoverdNetworksList = 1;
        optional Network chosenNetwork = 2;
        optional ConnectionStatus status = 3;
        optional types.Uint32 wpsDuration = 4;
        optional WifiConfigurations wifiConfigurations = 5;
        optional Hg2ConnProcess hg2ConnProcess = 6;
        optional types.Bool extAntenna = 7;
        optional types.Uint32 wpsCurrentDuration = 8;

        enum ConnectionStatus {
            NONE = 0;
            CONNECTED = 1;
            IN_PROGRESS = 2;
            DISCONNECTED = 3;
            WPS_DISCOVERY = 4;
            ERROR_PASSWORD = 5;
            ERROR_DHCP = 6;
            ERROR_COMMUNICATION = 7;
            ERROR_OTHER = 8;
            ERROR_UNREACHABLE = 9;
        }

        message Network {
            optional types.String name = 1;
            optional types.String password = 2;
            optional SignalStrength signalStrength = 3;
            optional types.Bool passwordNeeded = 4;
            optional types.Bool secured = 5;
            optional types.Bool saved = 6;

            enum SignalStrength {
                NONE = 0;
                LOW = 1;
                MID = 2;
                HIGH = 3;
                EXCELLENT = 4;
            }
        }

        message WifiConfigurations {
            optional types.Bool station = 1;;
            optional types.Bool wps = 2;
            optional types.Bool hg = 3;
        }

        message Hg2ConnProcess {
            optional Hg2ConnStatus status = 1;
            optional types.String ssid = 2;
            optional types.String sn = 3;
            optional hg2.HgCommTest commTest = 4;

            enum Hg2ConnStatus {
                NONE = 0;
                SAVED_DATA = 1;
                PENDING = 2;
                IN_PROGRESS = 3;
                CONNECTED = 4;
                ERROR_UNREACHABLE = 5;
                ERROR_PASSWORD = 6;
                ERROR_INTERNAL = 7;
                ERROR_OTHER = 8;
            }
        }
    }

    message Cellular {
        optional DataPlan dataPlan = 1;
        optional Configurations configurations = 2;
        optional GSMStatus gsmStatus = 3;
        optional SignalStrength signalStrength = 4;
        optional types.String operator = 5;
        optional Info modemInfo = 6;
        optional GSMGeneral gsmGeneral = 7;

        enum GSMStatus {
            GSM_STATUS_OK = 0;
            GSM_STATUS_COMM_ERROR = 1;
            GSM_STATUS_NO_SIGNAL = 2;
            GSM_STATUS_ENTER_APN = 4;
            GSM_STATUS_NOT_REGISTERED = 8;
            GSM_STATUS_ENTER_PIN = 16;
            GSM_STATUS_NO_SIM_CARD = 32;
            GSM_STATUS_NOT_ACTIVATED = 64;
            GSM_STATUS_NO_MODEM = 128;
            GSM_STATUS_UNKNOWN_FAILURE = 256;
            GSM_STATUS_IN_PROGRESS = 257;
        }

        enum GSMGeneral {
            GSM_GENERAL_OK = 0;
            GSM_GENERAL_PPP_DOWN = 1;
        }

        enum SignalStrength {
            NONE = 0;
            LOWEST = 1;
            LOW = 2;
            MEDIUM = 3;
            HIGH = 4;
            HIGHEST = 5;
            UNKNOWN = 6;
        }

        message DataPlan {
            optional types.Bool high = 1;
            optional types.Bool lowAuto = 2;
            optional types.Bool lowManual = 3;
            optional GSMActivationStatus activationStatus = 4;

            enum GSMActivationStatus {
                GSM_ACTIVATION_STATUS_OK = 0;
                GSM_ACTIVATION_STATUS_FAILED_NO_RESPONSE_FROM_SERVER = 1;
                GSM_ACTIVATION_STATUS_FAILED_UNIDENTIFIED_NUM = 2;
                GSM_ACTIVATION_STATUS_FAILED_SMS_BLOCKED = 3;
                GSM_ACTIVATION_STATUS_FAILED_NO_SMS_RESPONSE = 4;
                GSM_ACTIVATION_STATUS_FAILED_NOT_ACTIVATED = 5;
            }
        }
        message Configurations {
            optional types.String apn = 1;
            optional types.String username = 2;
            optional types.String password = 3;
            optional types.String pin = 4;
            optional types.String phoneNum = 5;
        }

        message Info {
            optional types.String gsmImsi = 1;
            optional types.String gsmImei = 2;
            optional types.String cdmaMeid = 3;
            optional types.String model = 4;
            optional types.String fwVersion = 5;
        }
    }

    message Gpio {
        optional Pri pri = 1;
        optional S0Meter s0Meter = 2;
        optional DeviceType deviceType = 3;

        message DeviceType {
            optional types.Bool none = 1;
            optional types.Bool pri = 2;
            optional types.Bool externalGenerator = 3;
            optional types.Bool s0Meter = 4;
        }

        message Pri {
            optional types.Bool disable = 1;
            optional types.Bool rrcr = 2;
            optional types.Bool acRelay = 3;
            optional types.Bool rrcrAcRelay = 4;
            optional types.Bool drm = 5;
            optional types.Bool externalGenerator = 6;
            optional types.Bool freqControl = 7;
        }

        message S0Meter {
            optional Function pb_function = 1;
            optional types.Uint32 configuration = 2;

            message Function {
                optional types.Bool mExport = 1;
                optional types.Bool consumption = 2;
                optional types.Bool mImport = 3;
                optional types.Bool none = 4;
            }
        }
    }

    message ModbusTcpPort {
        optional types.Bool enabled = 1;
        optional types.Uint32 port = 2;
    }

    message Zigbee {
//        enum DeviceStateCase {
//            DEVICE_STATE_NOT_SET = 0;
//            ZIGBEE_SLAVE_STATUS = 5;
//            HA_STATUS = 6;
//        }

        optional zigbee.ModuleInfo moduleInfo = 1;
        optional zigbee.ModuleConfigs moduleConfigs = 2;
        optional zigbee.OperationMode operationMode = 3;
        repeated zigbee.Device devicesList = 4;
        oneof deviceState {
            zigbee.SlaveStatus zigbeeSlaveStatus = 5;
            zigbee.HAStatus haStatus = 6;
        }
        optional zigbee.ModuleStatus moduleStatus = 7;
    }

    message Battery48V {
        optional BatteryProfile selectedProfile = 1;
        repeated BatteryProfile seProfilesList = 2;

        enum Manufacturer {
            UNKNOWN = 0;
            LG = 1;
            BYD = 2;
        }

        message BatteryProfile {
            optional types.Uint32 identifier = 1;
            optional types.String name = 2;
            optional Manufacturer manufacturer = 3;
        }
    }
}
