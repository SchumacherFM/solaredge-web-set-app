syntax = "proto2";

import "general_types.proto";
import "types.proto";

package web_device_manager;

message DeviceManager {
    optional AddDeviceStatus addDeviceStatus = 1;
    optional types.Uint32 onlineDevices = 2;
    repeated HaDevice haDeviceList = 3;


    message AddDeviceStatus {
        optional Status status = 1;
        optional types.Uint32 maxDuration = 2;
        optional types.Uint32 currentDuration = 3;
        optional types.Uint32 pairedDevices = 4;

        enum Status {
            NOT_IN_PROCESS = 0;
            IN_PROCESS = 1;
        }
    }

    message HaDevice {
//        enum HaDeviceCase {
//            HA_DEVICE_NOT_SET = 0;
//            HA_LEGACY = 2;
//        }

        optional types.Uint32 identifier = 1;
        oneof HaDevice {
            HaLegacy haLegacy = 2;
        }

        enum DeviceType {
            ON_OFF = 0;
            LEVEL_CTRL = 1;
        }

        enum State {
            OFF = 0;
            ON = 1;
            OFFLINE = 2;
        }

        message DeviceState {
            optional State state = 1;
            optional types.Uint32 level = 2;
            optional State requestState = 3;
            optional types.Bool locked = 4;
        }

        message HaLegacy {
            optional DeviceMode deviceMode = 1;
            optional DeviceStatus deviceStatus = 2;
            optional DeviceInfo deviceInfo = 3;
            optional DeviceProperties deviceProp = 4;
            optional types.Bool online = 5;

            message DeviceMode {
                optional types.Bool ha = 1;
                optional types.Bool alarm = 2;
            }

            message DeviceInfo {
                optional DeviceType deviceType = 1;
                optional types.String serialNum = 2;
                optional types.String model = 3;
                optional types.String mfg = 4;
                optional types.String version = 5;
                optional types.String mac = 6;
            }

            message DeviceStatus {
                optional DeviceState deviceState = 1;
                optional types.Float power = 2;
                optional types.Float energy = 3;
                optional general_types.Date lastComm = 4;
                optional types.Int32 rssi = 5;
            }

            message DeviceProperties {
                optional types.Uint32 ratedPower = 1;
                optional types.Uint32 minPowerToStart = 2;
                optional types.Uint32 minPowerDelayToStartMins = 3;
                optional types.Uint32 maxPurchasedPowerToStop = 4;
                optional types.Uint32 maxPurchasedPowerDelayToStopMins = 5;
                optional types.Uint32 minOnTimeMins = 6;
                optional types.Uint32 maxOnTimeMins = 7;
            }
        }
    }
}

message Cmd {
//    enum CommandsCase {
//        COMMANDS_NOT_SET = 0;
//        EMPTY_CMD = 1;
//        HA_DEVICE = 2;
//        REMOVE_DEVICE = 3;
//    }

    oneof commands {
        EmptyCmd emptyCmd = 1;
        DeviceManager.HaDevice haDevice = 2;
        types.Uint32 removeDevice = 3;
    }

    enum EmptyCmd {
        DEVICE_MANAGER_GET = 0;
        DEVICE_MANAGER_REMOVE_ALL = 1;
        DEVICE_MANAGER_ADD_DEVICE_START = 2;
        DEVICE_MANAGER_ADD_DEVICE_STOP = 3;
    }
}

message Resp {
//    enum ResponsesCase {
//        RESPONSES_NOT_SET = 0;
//        EMPTY_RESP = 1;
//        DEVICE_MANAGER = 2;
//    }

    oneof responses {
        EmptyResp emptyResp = 1;
        DeviceManager deviceManager = 2;
    }

    enum EmptyResp {
        TYPE_NONE = 0;
        TYPE_RESP_ACK = 1;
        TYPE_RESP_NACK = 2;
        TYPE_RESP_ERROR = 3;
        TYPE_RESP_ERROR_FORBIDDEN_VALUE_OUT_OF_RANGE = 4;
        TYPE_RESP_ERROR_BAD_REQUEST = 5;
    }
}

message DeviceManagerForm {
//    enum TypesCase {
//        TYPES_NOT_SET = 0;
//        CMD = 1;
//        RESP = 2;
//    }

    oneof types {
        Cmd cmd = 1;
        Resp resp = 2;
    }
}
