syntax = "proto2";

import "types.proto";

package web_power_control;

message PowerControl {
    optional GridControl gridControl = 1;
    optional EnergyManager energyManager = 2;
    optional RRCR rrcr = 3;
    optional ReactivePower reactivePower = 4;
    optional ActivePower activePower = 5;
    optional WakeupConfigs wakeupConfigs = 6;
    optional Advanced advanced = 7;
    optional PhaseBalancer phaseBalancer = 8;
    optional ExternalGenerator externalGenerator = 9;

    message GridControl {
        optional types.Bool enable = 1;
    }

    message EnergyManager {
        optional LimitControl limitControl = 1;
        optional EnergyControl energyControl = 2;
        optional Operation operation = 3;
        optional Calendar calendar = 4;
        optional StorageControl storageControl = 5;
        optional Advanced advanced = 6;
        optional BackupConf backupConf = 7;
        optional Ess ess = 8;

        message StoragePreConditions {
            optional BatteryTestState batteryTestState = 1;

            enum BatteryTestState {
                IDLE = 0;
                NOT_TESTED = 1;
                SLAVES_NOT_TESTED = 2;
                SLAVES_NOT_COMMUNICATING = 3;
            }
        }

        message LimitControl {
            optional ControlMode controlMode = 1;
            optional types.FloatS siteLimitWatt = 2;
            optional LimitMode limitMode = 3;

            message ControlMode {
                optional types.Bool exportControl = 1;
                optional types.Bool productionControl = 2;
                optional types.Bool minimumImportControl = 3;
                optional types.Bool disable = 4;
            }

            message LimitMode {
                optional types.Bool total = 1;
                optional types.Bool perPhase = 2;
            }
        }

        message EnergyControl {
            optional types.Bool msc = 1;
            optional types.Bool tou = 2;
            optional types.Bool backupOnly = 3;
            optional types.Bool disable = 4;
            optional types.Bool remote = 5;
            optional StoragePreConditions preConditions = 6;
        }

        message Operation {
        }

        message Calendar {
        }

        message StorageControl {
            optional types.FloatS backupReserved = 1;
            optional types.Bool gridCharge = 2;
            optional AcChargeLimit acChargeLimit = 3;
            optional StoragePreConditions preConditions = 4;

            message AcChargeLimit {
                optional LimitType limitType = 1;
                optional types.FloatS limit = 2;

                message LimitType {
                    optional types.Bool kwh = 1;
                    optional types.Bool pv = 2;
                    optional types.Bool none = 3;
                }
            }
        }

        message Advanced {
            optional types.Bool externalProduction = 1;
            optional types.FloatS maxPower = 2;
        }

        message BackupConf {
            optional types.Bool backupEnable = 1;
            optional types.FloatS backupReerved = 2;
            optional StoragePreConditions preConditions = 3;
        }

        message Ess {
            optional OperationMode operationMode = 1;
            optional types.Bool lockIsActive = 2;
            optional types.Uint32 timerSec = 3;
            optional StoragePreConditions preConditions = 4;

            message OperationMode {
                optional types.Bool unrestricted = 1;
                optional types.Bool exportOnly = 2;
                optional types.Bool importOnly = 3;
                optional types.Bool noExchange = 4;
            }
        }
    }

    message RRCR {
        optional State state0 = 1;
        optional State state1 = 2;
        optional State state2 = 3;
        optional State state3 = 4;
        optional State state4 = 5;
        optional State state5 = 6;
        optional State state6 = 7;
        optional State state7 = 8;
        optional State state8 = 9;
        optional State state9 = 10;
        optional State stateA = 11;
        optional State stateB = 12;
        optional State stateC = 13;
        optional State stateD = 14;
        optional State stateE = 15;
        optional State stateF = 16;
        optional types.Bool enable = 17;

        message State {
            optional types.FloatS cosphi = 1;
            optional types.Uint32 percentage = 2;
            optional types.Bool enable = 3;
        }
    }

    message ReactivePower {
        optional Mode mode = 1;
        optional types.FloatS cosphi = 2;
        repeated types.MapFloatSToFloatS cosphiPList = 3;
        optional types.FloatS q = 4;
        repeated types.MapFloatSToFloatS quList = 5;
        repeated types.MapFloatSToFloatS qpList = 6;
        optional types.FloatS uNominal = 7;
        optional PowerPriority powerPriority = 8;

        message Mode {
            optional types.Bool cosphi = 1;
            optional types.Bool cosphiP = 2;
            optional types.Bool q = 3;
            optional types.Bool quQp = 4;
            optional types.Bool pri = 5;
        }

        message PowerPriority {
            optional types.Bool active = 1;
            optional types.Bool reactive = 2;
        }
    }

    message ActivePower {
        optional types.FloatS powerLimit = 1;
        optional types.FloatS currentLimit = 2;
        optional WakeupGradient wakeupGradient = 3;
        optional types.Uint32 gradientTime = 4;
        repeated types.MapFloatSToFloatS pfList = 5;
        repeated types.MapFloatSToFloatS pvList = 6;
        optional types.FloatS rampRate = 7;
        optional PwrFrqConstantSlope pfConstantSlope = 8;

        message WakeupGradient {
            optional types.Bool enable = 1;
        }

        message PwrFrqConstantSlope {
            optional types.FloatS deadbandOverflow = 1;
            optional types.FloatS deadbandUnderflow = 2;
            optional types.FloatS slopeOverflow = 3;
            optional types.FloatS slopeUnderflow = 4;
        }
    }

    message WakeupConfigs {
        optional types.FloatS minWakeupFreq = 1;
        optional types.FloatS maxWakeupFreq = 2;
        optional types.FloatS minWakeupVgrid = 3;
        optional types.FloatS maxWakeupVgrid = 4;
    }

    message Advanced {
        optional SetFrt setFrt = 1;
        optional types.FloatS frtKFactor = 2;
        optional ZeroLimitControl zeroLimitControl = 3;
        optional ExternalRelay externalRelay = 4;

        message SetFrt {
            optional types.Bool enable = 1;
        }

        message ZeroLimitControl {
            optional types.Bool enable = 1;
        }

        message ExternalRelay {
            optional RelayStatus relayStatus = 1;
            optional RelayFunction relayFunction = 2;
            optional DisengageMethod disengageMethod = 3;

            enum RelayStatus {
                NOT_AVAILABLE = 0;
                IDLE = 1;
                SIGNALING = 2;
                ERROR = 3;
            }

            message RelayFunction {
                optional types.Bool disabled = 1;
                optional types.Bool inverterGridConnection = 2;
                optional types.Bool errorSignaling = 3;
            }

            message DisengageMethod {
                optional types.Bool eventEnded = 1;
                optional types.Bool pSwitch = 2;
                optional types.Bool timeout = 3;
                optional types.Uint32 timeoutSec = 4;
            }
        }
    }

    message PhaseBalancer {
        optional Type type = 1;
        optional types.FloatS maxProduction = 2;

        message Type {
            optional types.Bool disabled = 1;
            optional types.Bool production = 2;
        }
    }

    message ExternalGenerator {
        optional types.Bool enable = 1;
        repeated types.MapFloatSToFloatS pfList = 2;
        repeated types.MapFloatSToFloatS pvList = 3;
    }
}
